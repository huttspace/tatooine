// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MembershipRole {
  ADMIN
}

model Membership {
  id        String         @id @default(cuid())
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  userId    String
  role      MembershipRole

  @@unique([projectId, userId])
  @@map("memberships")
}

model Project {
  id           String        @id @default(cuid())
  name         String
  members      Membership[]
  plans        Plan[]
  environments Environment[]

  @@map("projects")
}

model Environment {
  id               String            @id @default(cuid())
  name             String
  envKey           String
  production       Boolean           @default(false)
  project          Project           @relation(fields: [projectId], references: [id])
  projectId        String
  environmentPlans EnvironmentPlan[]

  @@unique([projectId, envKey])
  @@map("environments")
}

model Plan {
  id               String            @id @default(cuid())
  name             String
  key              String
  project          Project           @relation(fields: [projectId], references: [id])
  projectId        String
  environmentPlans EnvironmentPlan[]

  @@unique([projectId, key])
  @@map("plans")
}

model EnvironmentPlan {
  plan          Plan        @relation(fields: [planId], references: [id])
  planId        String
  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String

  @@unique([planId, environmentId])
  @@map("environmentPlans")
}
